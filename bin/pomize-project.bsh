#!/bin/sh
/*/. 2>/dev/null; exec "$(dirname "$0")"/ImageJ.sh "$0" "$@" # exec with fiji */

import fiji.SimpleExecuter;

import fiji.build.Fake;
import fiji.build.Rule;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.Stack;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

if (bsh.args.length == 0) {
	System.err.println("Usage: " + this.interpreter.getSourceFileInfo()
		+ " <Fakefile-target> [<Fakefile-target>...]");
	System.exit(1);
}

File fijiDir = new File(System.getProperty("fiji.dir"));

void moveSources(File sourceDirectory, File targetJavaDirectory, File targetResourceDirectory, File targetJavadocDirectory) {
	File[] list = sourceDirectory.listFiles();
	if (list == null)
		return;
	for (File file : list) {
		File targetJavaFile = new File(targetJavaDirectory, file.getName());
		File targetResourceFile = new File(targetResourceDirectory, file.getName());
		File targetJavadocFile = new File(file.getName().equals("overview.html") ?  targetJavadocDirectory.getParentFile() : targetJavadocDirectory, file.getName());
		if (file.isDirectory() && !file.getAbsolutePath().endsWith("/src/main/java") && !file.getAbsolutePath().endsWith("/src/main/resources") && !file.getName().startsWith("."))
			moveSources(file, targetJavaFile, targetResourceFile, targetJavadocFile);
		else if (file.getName().endsWith(".java")) {
			SimpleExecuter.exec(fijiDir, new String[] { "mkdir", "-p", targetJavaDirectory.getPath() });
			SimpleExecuter.exec(fijiDir, new String[] { "git", "mv", file.getPath(), targetJavaFile.getPath() });
		}
		else if (file.isFile() && !new SimpleExecuter(fijiDir, new String[] { "git", "ls-files", file.getAbsolutePath() }).getOutput().equals("")) {
			name = file.getName();
			if (name.equals("plugins.config") || name.endsWith(".gif") || name.endsWith(".jpg") || name.endsWith(".png") || name.endsWith(".properties") || file.getAbsolutePath().indexOf("/services/") > 0) {
				SimpleExecuter.exec(fijiDir, new String[] { "mkdir", "-p", targetResourceDirectory.getPath() });
				SimpleExecuter.exec(fijiDir, new String[] { "git", "mv", file.getPath(), targetResourceFile.getPath() });
			}
			else if (file.getName().endsWith(".html")) {
				SimpleExecuter.exec(fijiDir, new String[] { "mkdir", "-p", targetJavadocFile.getParentFile().getPath() });
				SimpleExecuter.exec(fijiDir, new String[] { "git", "mv", file.getPath(), targetJavadocFile.getPath() });
			}
			else
				print("Warning: did not move " + file);
		}
	}
}

void moveSources(String baseDirectory) {
	moveSources(new File(baseDirectory), new File(baseDirectory, "src/main/java"), new File(baseDirectory, "src/main/resources"), new File(baseDirectory, "src/main/javadoc/resources"));
}

String readFile(File file) {
	byte[] buffer = new byte[65536];
	in = new FileInputStream(file);
	out = new ByteArrayOutputStream();
	for (;;) {
		int count = in.read(buffer);
		if (count < 0)
			break;
		out.write(buffer, 0, count);
	}
	in.close();
	out.close();
	return out.toString();
}

String getBaseName(String target) {
	String key = target;
	if (key.endsWith(".jar"))
		key = key.substring(0, key.length() - 4);
	int slash = key.lastIndexOf('/');
	if (slash >= 0)
		key = key.substring(slash + 1);
	return key;
}

void writeAndAddFile(String contents, File file) {
	dir = file.getParentFile();
	if (dir != null && !dir.exists())
		dir.mkdirs();
	out = new FileOutputStream(file);
	out.write(contents.getBytes("UTF-8"));
	out.close();
	SimpleExecuter.exec(fijiDir, new String[] { "git", "add", file.getPath() });
}

String getGroupId(String artifact) {
	if ("ij".equals(artifact))
		return "net.imagej";
	if ("junit".equals(artifact))
		return "junit";
	if ("jzlib".equals(artifact) || "jsch".equals(artifact))
		return "com.jcraft";
	if ("javassist".equals(artifact))
		return "org.javassist";
	if ("Image_5D".equals(artifact))
		return "net.imagej";
	return "fiji";
}

void writePOM(String target, Rule rule) {
	String versionRegex = "(.*?)-([\\.0-9]*(-SNAPSHOT)?)";
	Pattern versionPattern = Pattern.compile(versionRegex);
	dependencies = "";
	for (String target : rule.getJarDependencies()) {
		artifact = getBaseName(target);
		version = null;
		Matcher matcher = versionPattern.matcher(artifact);
		if (matcher.matches()) {
			artifact = matcher.group(1);
			version = matcher.group(2);
		}
		group = getGroupId(artifact);
		if (rule.target.endsWith("/" + artifact + ".jar"))
			continue;

		dependencies += "\t\t<dependency>\n"
			+ "\t\t\t<groupId>" + group + "</groupId>\n"
			+ "\t\t\t<artifactId>" + artifact + "</artifactId>\n"
			+ (version == null || version.equals("") ? "" : "\t\t\t<version>" + version + "</version>\n")
			+ "\t\t</dependency>\n";
	}

	pom = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
		+ "<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
		+ "\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
		+ "\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n"
		+ "\t\thttp://maven.apache.org/xsd/maven-4.0.0.xsd\">\n"
		+ "\t<modelVersion>4.0.0</modelVersion>\n"
		+ "\n"
		+ "\t<parent>\n"
		+ "\t\t<groupId>fiji</groupId>\n"
		+ "\t\t<artifactId>pom-fiji-plugins</artifactId>\n"
		+ "\t\t<version>2.0.0-SNAPSHOT</version>\n"
		+ "\t</parent>\n"
		+ "\n"
		+ "\t<artifactId>" + getBaseName(target) + "</artifactId>\n"
		+ "\n"
		+ "\t<name>" + target + "</name>\n"
		+ "\t<description></description>\n"
		+ "\n"
		+ (dependencies.equals("") ?
			"" :
			"\t<dependencies>\n"
			+ dependencies
			+ "\t</dependencies>\n"
			+ "\n")
		+ "\t<build>\n"
		+ "\t\t<plugins>\n"
		+ "\t\t\t<plugin>\n"
		+ "\t\t\t\t<artifactId>maven-jar-plugin</artifactId>\n"
		+ "\t\t\t\t<configuration>\n"
		+ "\t\t\t\t\t<archive>\n"
		+ "\t\t\t\t\t\t<manifest>\n"
		//+ "\t\t\t\t\t\t\t<packageName>" + getPackageName() + "</packageName>\n"
		+ "\t\t\t\t\t\t</manifest>\n"
		+ "\t\t\t\t\t</archive>\n"
		+ "\t\t\t\t</configuration>\n"
		+ "\t\t\t</plugin>\n"
		+ "\t\t</plugins>\n"
		+ "\t</build>\n"
		+ "\n"
		+ "</project>";
	writeAndAddFile(pom, new File(fijiDir, rule.getStripPath() + "pom.xml"));
}

void editParentPOM(String stripPath) {
	if (stripPath.endsWith("/"))
		stripPath = stripPath.substring(0, stripPath.length() - 1);
	slash = stripPath.lastIndexOf('/');
	file = new File(fijiDir, stripPath.substring(0, slash) + "/pom.xml");
	if (!file.exists())
		return;
	module = stripPath.substring(slash + 1);
	pom = readFile(file);
	offset = pom.indexOf("\t</modules>");
	pom = pom.substring(0, offset)
		+ "\t\t<module>" + module + "</module>\n"
		+ pom.substring(offset);
	writeAndAddFile(pom, file);
}

void fsckEclipse(String stripPath) {
	factoryPath = "<factorypath>\n"
		+ "\t<factorypathentry kind=\"VARJAR\" id=\"M2_REPO/net/java/sezpoz/sezpoz/1.9/sezpoz-1.9.jar\" enabled=\"true\" runInBatchMode=\"true\"/>\n"
		+ "</factorypath>";
	writeAndAddFile(factoryPath, new File(fijiDir, stripPath + ".factorypath"));
	settings = "#Sun Jan 15 20:38:51 CET 2010\n"
		+ "eclipse.preferences.version=1\n"
		+ "org.eclipse.jdt.apt.aptEnabled=true\n"
		+ "org.eclipse.jdt.apt.genSrcDir=target/classes\n"
		+ "org.eclipse.jdt.apt.reconcileEnabled=false\n";
	writeAndAddFile(settings, new File(fijiDir, stripPath + ".settings/org.eclipse.jdt.apt.core.prefs"));
}

boolean handleMainClass(Rule rule, String stripPath) {
	String mainClass = rule.getVar("MAINCLASS");
	if (mainClass == null)
		return true;

	file = new File(fijiDir, rule.getStripPath() + "src/main/resources/META-INF/MANIFEST.MF");
	if (file.exists()) {
		print("Cannot set main-class " + mainClass + ": " + file + " exists already!");
		return false;
	}

	manifest = "Manifest-Version: 1.0\n"
		+ "Main-Class: " + mainClass + "\n";
	writeAndAddFile(manifest, file);
	return true;
}

void editFakefile(String target, String stripPath) {
	insert = target + " <- " + stripPath + "pom.xml\n";

	fakefile = readFile(new File(fijiDir, "Fakefile"));

	for (String key : new String[] { "CLASSPATH", "MAINCLASS" }) {
		int offset = fakefile.indexOf("\n" + key + "(" + target + ")=");
		if (offset > 0) {
			int end = fakefile.indexOf('\n', offset + 1);
			while (fakefile.charAt(end - 1) == '\\')
				end = fakefile.indexOf('\n', end + 1);
			fakefile = fakefile.substring(0, offset)
				+ fakefile.substring(end);
		}
	}

	int offset = fakefile.indexOf("\n" + target + " <- ");
	if (offset >= 0) {
		// does not use the default rule
		int endOffset = fakefile.indexOf("\n", offset + 1);
		while (endOffset > 0 && fakefile.charAt(endOffset - 1) == '\\')
			endOffset = fakefile.indexOf("\n", endOffset + 1);
		fakefile = fakefile.substring(0, offset)
			+ fakefile.substring(endOffset);
	}

	offset = fakefile.indexOf("\n\n# pre-Java5 generics");
	if (offset < 0) {
		System.err.println("Could not find pre-Java5 generics label!");
		System.exit(1);
	}
	else {
		pomLabelOffset = fakefile.indexOf("\n\n# pom.xml sub-projects");
		fakefile = fakefile.substring(0, offset + 1)
			+ (pomLabelOffset < 0 ? "\n# pom.xml sub-projects\n\n" : "")
			+ insert
			+ fakefile.substring(offset + 1);
	}

	writeAndAddFile(fakefile, new File(fijiDir, "Fakefile"));
}

rules = new LinkedHashSet();
void addRule(Rule rule) {
	if (rule == null || rules.contains(rule))
		return;
	// Beanshell cannot handle MultiIterable...
	iter = rule.getDependencies().iterator();
	while (iter.hasNext()) {
		Rule dependency = iter.next();
		addRule(dependency);
	}
	if (rule.getClass().getName().endsWith(".CompileJar"))
		rules.add(rule);
}

boolean hasNonMavenDependency(Rule rule) {
	for (String dependency : rule.getJarDependencies()) {
		if (dependency.startsWith(fijiDir.getAbsolutePath()))
			dependency = dependency.substring(fijiDir.getAbsolutePath().length() + 1);
		Rule rule2 = parser.getRule(dependency);
		if (rule2 != null && rule2.getClass().getName().endsWith(".CompileJar") && !rules.contains(rule2)) {
			print("Target '" + rule.target + "' has a non-Maven dependency '" + dependency + "' (" + rule2.getClass() + ")");
			return true;
		}
	}
	return false;
}

fake = new Fake();
parser = fake.parse(new FileInputStream(new File(fijiDir, "Fakefile")), fijiDir);
parser.parseRules(new ArrayList());

errors = 0;

if (bsh.args.length == 1 && bsh.args[0].equals("--all")) {
	bsh.args = new String[0];
	for (String target : parser.getVariable("PLUGIN_TARGETS").split("[ \t]+"))
		addRule(parser.getRule(target));
}

// topo-sort
for (i = 0; i < bsh.args.length; i++) {
	target = bsh.args[i];
	rule = parser.getRule(target);
	if (rule == null) {
		print("No rule found for " + target);
		errors++;
		continue;
	}
	addRule(rule);
}

for (Rule rule : rules) {
	target = rule.target;
	if (!rule.getClass().getName().endsWith(".CompileJar")) {
		print("Target '" + target + "' is not a .jar rule (" + rule.getClass() + ")");
		errors++;
		continue;
	}
	if (hasNonMavenDependency(rule)) {
		errors++;
		continue;
	}

	String stripPath = rule.getStripPath();

	moveSources(stripPath);
	writePOM(target, rule);
	editParentPOM(stripPath);
	fsckEclipse(stripPath);
	editFakefile(target, stripPath);
	if (!handleMainClass(rule, stripPath)) {
		errors++;
		continue;
	}

	if (stripPath.endsWith("/"))
		stripPath = stripPath.substring(0, stripPath.length() - 1);
	stripPath = stripPath.substring(stripPath.lastIndexOf('/') + 1);
	SimpleExecuter.exec(fijiDir, new String[] { "git", "commit", "-m", "Mavenize " + stripPath });
}

if (errors > 0)
	System.exit(1);

